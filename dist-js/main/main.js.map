{"version":3,"file":"main.js","sourceRoot":"","sources":["../../src/main/main.ts"],"names":[],"mappings":";;AAAA,uCAAuD;AACvD,6BAA6B;AAE7B,wCAAwC;AACxC,iDAAiD;AACjD,IAAI,UAAyB,CAAC;AAE9B,SAAS,YAAY;IACnB,6BAA6B;IAC7B,UAAU,GAAG,IAAI,wBAAa,CAAC;QAC7B,MAAM,EAAE,IAAI;QACZ,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,iBAAiB;QACxB,cAAc,EAAE;YACd,eAAe,EAAE,IAAI;SACtB;KACF,CAAC,CAAC;IAEH,sCAAsC;IACtC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC;IAE9D,qBAAqB;IACrB,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;IAEtC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAChD,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;QACrD,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,qCAAqC;IACrC,UAAU,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;QAC3B,iEAAiE;QACjE,mEAAmE;QACnE,oDAAoD;QACpD,qBAAqB;IACvB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,wDAAwD;AACxD,yDAAyD;AACzD,sDAAsD;AACtD,cAAG,CAAC,EAAE,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;AAE9B,oCAAoC;AACpC,cAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;IAC/B,2DAA2D;IAC3D,8DAA8D;IAC9D,IAAI,OAAO,CAAC,QAAQ,KAAK,QAAQ,EAAE;QACjC,cAAG,CAAC,IAAI,EAAE,CAAC;KACZ;AACH,CAAC,CAAC,CAAC;AAEH,cAAG,CAAC,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;IACtB,gEAAgE;IAChE,4DAA4D;IAC5D,IAAI,UAAU,KAAK,IAAI,EAAE;QACvB,YAAY,EAAE,CAAC;KAChB;AACH,CAAC,CAAC,CAAC;AAEH,4EAA4E;AAC5E,uEAAuE;AACvE,kBAAO,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAQ,EAAE,GAAW,EAAE,EAAE;IAC3C,uCAAuC;IACvC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC","sourcesContent":["import { app, BrowserWindow, ipcMain } from \"electron\";\nimport * as path from \"path\";\n\n// let windows: [Electron.BrowserWindow]\n// let mainWindow: Electron.BrowserWindow | null;\nlet mainWindow: BrowserWindow;\n\nfunction createWindow() {\n  // Create the browser window.\n  mainWindow = new BrowserWindow({\n    height: 1000,\n    width: 2000,\n    title: \"my window title\",\n    webPreferences: {\n      nodeIntegration: true,\n    },\n  });\n\n  // and load the index.html of the app.\n  mainWindow.loadFile(path.join(__dirname, \"../../index.html\"));\n\n  // Open the DevTools.\n  mainWindow.webContents.openDevTools();\n\n  mainWindow.webContents.on(\"did-finish-load\", () => {\n    mainWindow.webContents.send(\"ping\", \"ping message!\");\n    mainWindow.webContents.send(\"share-main-window\", mainWindow);\n  });\n\n  // Emitted when the window is closed.\n  mainWindow.on(\"closed\", () => {\n    // Dereference the window object, usually you would store windows\n    // in an array if your app supports multi windows, this is the time\n    // when you should delete the corresponding element.\n    // mainWindow = null;\n  });\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on(\"ready\", createWindow);\n\n// Quit when all windows are closed.\napp.on(\"window-all-closed\", () => {\n  // On OS X it is common for applications and their menu bar\n  // to stay active until the user quits explicitly with Cmd + Q\n  if (process.platform !== \"darwin\") {\n    app.quit();\n  }\n});\n\napp.on(\"activate\", () => {\n  // On OS X it\"s common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (mainWindow === null) {\n    createWindow();\n  }\n});\n\n// In this file you can include the rest of your app\"s specific main process\n// code. You can also put them in separate files and require them here.\nipcMain.on(\"pong\", (_: Event, msg: string) => {\n  // tslint:disable-next-line: no-console\n  console.log(msg);\n});\n"]}